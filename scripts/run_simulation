# run_simulation.py
# Author: Ghazal Raza
# Purpose: Combine neuron model and optogenetics for patch-clamp simulation

import numpy as np
import matplotlib.pyplot as plt
from scripts.neuron_model import lif_neuron_step, update_synapse
from scripts.optogenetics import light_conductance

# -----------------------------
# Simulation Parameters
# -----------------------------
C_m = 200e-12
g_L = 10e-9
E_L = -70e-3
V_th = -50e-3
V_reset = -65e-3

E_exc, g_exc_max = 0.0, 5e-9
E_inh, g_inh_max = -75e-3, 5e-9
tau_exc, tau_inh = 5e-3, 10e-3

dt, T = 0.1e-3, 0.5
time = np.arange(0, T, dt)

# Spike trains
np.random.seed(42)
rate_exc, rate_inh = 20, 15
spike_exc = np.random.rand(len(time)) < rate_exc*dt
spike_inh = np.random.rand(len(time)) < rate_inh*dt

# -----------------------------
# Optogenetic Parameters
# -----------------------------
g_ChR2_max, E_ChR2 = 15e-9, 0.0
g_Arch_max, E_Arch = 20e-9, -75e-3
ChR2_on = (time > 0.2) & (time < 0.3)
Arch_on = (time > 0.35) & (time < 0.45)

# -----------------------------
# Initialize arrays
# -----------------------------
V = np.zeros(len(time))
V[0] = E_L
V_dual = np.copy(V)

g_exc_arr = np.zeros(len(time))
g_inh_arr = np.zeros(len(time))
g_ChR2_arr = np.zeros(len(time))
g_Arch_arr = np.zeros(len(time))

# -----------------------------
# Run Simulation
# -----------------------------
for t in range(1, len(time)):
    g_exc_arr[t] = update_synapse(g_exc_arr[t-1], tau_exc, dt, g_exc_max, spike_exc[t-1])
    g_inh_arr[t] = update_synapse(g_inh_arr[t-1], tau_inh, dt, g_inh_max, spike_inh[t-1])
    
    g_ChR2_arr[t] = light_conductance(t, ChR2_on, g_ChR2_max)
    g_Arch_arr[t] = light_conductance(t, Arch_on, g_Arch_max)
    
    I_total = g_exc_arr[t]*(E_exc - V_dual[t-1]) + \
              g_inh_arr[t]*(E_inh - V_dual[t-1]) + \
              g_ChR2_arr[t]*(E_ChR2 - V_dual[t-1]) + \
              g_Arch_arr[t]*(E_Arch - V_dual[t-1])
    
    dV = (g_L*(E_L - V_dual[t-1]) + I_total)/C_m * dt
    V_dual[t] = V_dual[t-1] + dV
    
    if V_dual[t] >= V_th:
        V_dual[t] = V_reset

# -----------------------------
# Plot Results
# -----------------------------
plt.figure(figsize=(12,8))

plt.subplot(4,1,1)
plt.plot(time*1000, V, label='Baseline', color='black')
plt.plot(time*1000, V_dual, label='Dual Optogenetics', color='magenta')
plt.ylabel('Membrane Potential (V)')
plt.title('Patch-Clamp with Dual Optogenetics')
plt.legend()

plt.subplot(4,1,2)
plt.plot(time*1000, g_exc_arr*1e9, label='Excitatory', color='green')
plt.plot(time*1000, g_inh_arr*1e9, label='Inhibitory', color='red')
plt.ylabel('Conductance (nS)')
plt.legend()

plt.subplot(4,1,3)
plt.plot(time*1000, g_ChR2_arr*1e9, label='ChR2', color='blue')
plt.plot(time*1000, g_Arch_arr*1e9, label='Arch/NpHR', color='orange')
plt.ylabel('Light Conductance (nS)')
plt.legend()

plt.subplot(4,1,4)
plt.plot(time*1000, ChR2_on, color='blue', label='ChR2 Pulse')
plt.plot(time*1000, Arch_on, color='orange', label='Arch/NpHR Pulse')
plt.ylabel('Light ON/OFF')
plt.xlabel('Time (ms)')
plt.ylim(-0.1, 1.1)
plt.legend()

plt.tight_layout()
plt.show()
